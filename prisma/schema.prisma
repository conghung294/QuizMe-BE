// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id              String            @id @default(uuid())
  email           String            @unique
  password        String
  name            String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relations
  questionSets    QuestionSet[]
  practiceSessions PracticeSession[]

  @@map("users")
}

// Question Set - Bộ câu hỏi được tạo từ một file
model QuestionSet {
  id          String        @id @default(uuid())
  title       String
  subject     String
  tone        String?
  difficulty  String?
  type        QuestionType
  fileName    String?       // Tên file gốc
  fileContent String?       // Nội dung file (có thể lưu để tham khảo)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  user        User?         @relation(fields: [userId], references: [id])
  userId      String?
  questions   Question[]
  practiceSessions PracticeSession[]

  @@map("question_sets")
}

// Question - Câu hỏi cụ thể
model Question {
  id             String      @id @default(uuid())
  content        String      // Nội dung câu hỏi
  explanation    String?     // Giải thích đáp án
  type           QuestionType
  order          Int         // Thứ tự trong bộ câu hỏi
  createdAt      DateTime    @default(now())

  // Relations
  questionSet    QuestionSet @relation(fields: [questionSetId], references: [id], onDelete: Cascade)
  questionSetId  String
  choices        Choice[]
  correctAnswers CorrectAnswer[]
  practiceAnswers PracticeAnswer[]

  @@map("questions")
}

// Choice - Các lựa chọn cho câu hỏi
model Choice {
  id         String   @id @default(uuid())
  label      String   // A, B, C, D hoặc True, False
  content    String   // Nội dung lựa chọn
  order      Int      // Thứ tự hiển thị

  // Relations
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String

  @@map("choices")
}

// Correct Answer - Đáp án đúng (hỗ trợ multiple correct answers)
model CorrectAnswer {
  id         String   @id @default(uuid())
  choiceLabel String  // A, B, C, D - label của choice đúng

  // Relations
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String

  @@map("correct_answers")
}

// Practice Session - Phiên luyện tập
model PracticeSession {
  id           String    @id @default(uuid())
  score        Int       @default(0)
  totalQuestions Int     @default(0)
  startedAt    DateTime  @default(now())
  endedAt      DateTime?
  isCompleted  Boolean   @default(false)

  // Relations
  user         User?     @relation(fields: [userId], references: [id])
  userId       String?
  questionSet  QuestionSet @relation(fields: [questionSetId], references: [id])
  questionSetId String
  answers      PracticeAnswer[]

  @@map("practice_sessions")
}

// Practice Answer - Câu trả lời trong phiên luyện tập
model PracticeAnswer {
  id           String   @id @default(uuid())
  selectedChoices String[] // Array of choice labels: ["A", "B"] for multiple choice
  isCorrect    Boolean  @default(false)
  answeredAt   DateTime @default(now())

  // Relations
  session      PracticeSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId    String
  question     Question @relation(fields: [questionId], references: [id])
  questionId   String

  @@map("practice_answers")
}

// Enum for question types
enum QuestionType {
  MULTIPLE_CHOICE    // Trắc nghiệm 1 đáp án
  TRUE_FALSE         // Đúng/Sai
  MULTIPLE_RESPONSE  // Nhiều đáp án đúng
  MATCHING          // Ghép đôi
  COMPLETION        // Điền khuyết

  @@map("question_type")
}
